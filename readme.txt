---------------------------------
  るしぼっと4 設計仕様
    ::BotName= Lucibot4
    ::BotDate= 2019/2/24
    ::Version= 4.0.0.2

    ::Admin= Lucida（lucida3rd@mstdn.mynoghra.jp）
    ::github= https://github.com/lucida3rd/lucibot
---------------------------------


★★★るしぼっとについては現在、全体を見直し中なので使用しないでください★★★


＜概要＞
python3で作成したmastodonクラウド環境下で動くことを前提にしたbotです。


＜目次＞
◆前提
◆セットアップ
◆twitter APIの取得方法
◆デフォルトエンコードの確認
◆MeCabのインストール

◆機能説明
　◇連合TL監視機能
　◇ランダムトゥート機能
　◇リプライ機能
　◇ファボ通知機能
　◇周期トゥート機能
　◇ワード学習機能
　◇トラヒック機能
　◇ハード監視機能
　◇ユーザ収集機能
　◇自動フォロー機能

◆免責事項


---------------------------------
＜前提＞
・mastodon v2.7.2以上（バージョンが異なると一部APIの挙動が異なる場合があるようです）
・CentOS7
・python3（v3.7で確認）
・cron（もしくはこれに該当するスケジューラ）
・セットアップした鯖のmastodonのアカウント（必要数分。マルチアカウント対応。）
・twitterアカウント（なくても動作します）
・githubアカウント
・OSのデフォルトエンコード：utf-8

※githubアカウントがなくても運用にこぎつけることはできますが、
　バージョン管理できないのでここではgithub垢持ってる前提で記載します。

※以上の前提が異なると一部機能が誤動作の可能性があります


---------------------------------
＜セットアップ：初回のみ＞
うちのmasterから最新版をpullする方法で記載します。
中級者、上級者の方で管理がめんどければforkしちゃっても問題ないです。
（※下のほうの免責事項はお読みください）

セットアップ作業なのでroot権限のままでよいです。

1.るしぼっと専用のユーザを作ります。
# useradd [ユーザ名]
# passwd [パスワード]
　パスワードは2回入力を求められます

　いちおIDをメモします。※後ででもよいです
# id [ユーザ名]

2.ユーザに切り替える。
# su - [ユーザ名]
$ pwd
　ホームフォルダをメモる

3.ホームフォルダにるしぼっとのcloneを作成します。
$ git clone https://github.com/lucida3rd/lucibot.git bot
　clone先のフォルダ名は任意です。

4.るしぼっとデータ格納用のフォルダを作成します。
$ cd ..
$ mkdir botdata

5.rootに戻って必要なライブラリをインストールします。
$ exit
# pip3 install requests requests_oauthlib
# pip3 install psutil
# pip3 install pytz
# pip3 install python-dateutil
# pip3 install mecab-python3

6.デフォルトエンコードを確認する。
　OSのデフォルトエンコードがutf-8かを確認します。
　以下＜デフォルトエンコードの確認＞をご参照ください。

7.MeCabをインストールする。
　以下＜MeCabのインストール＞をご参照ください。

8.cronでbotを1分ごとに定期実行するように設定します。
# vi /etc/cron.d/0hourly

*/1 * * * * root cd [インストールしたフォルダ]; python run.py
00 0 * * * root cd [インストールしたフォルダ]; python run_hard.py


---------------------------------
＜バージョンアップ＞
うちのmasterから最新版をpullする方法です。
　※forkしてる場合はforkリポジトリにmasterを反映してから実行します。

1.セットアップしたサーバにログインし、るしぼっと用ユーザに切り替えます。
　そしてるしぼっとのcloneフォルダにcdします。
# su - [ユーザ名]
$ pwd
　/home/[ユーザ名]/bot
　※cloneフォルダにいることを確認します

2.最新版のリストをfetchします。
$ git fetch
　original->master と出たら、githubに最新版があります。

3.アップデートします。
$ git stash
$ git pull
  pullされたファイル一覧が出ればOKです。

$ exit
　作業は終わりです。


---------------------------------
＜twitter APIの取得方法＞
1.以下、twitterのサイトにtwitterアカウントでログインします。
　https://apps.twitter.com/app/new
2.以下を入力し、登録します。
　・Name（アプリ名）
　・Description（アプリの説明）
　・Website（自分のブログのURLなど）
　・Callback URLは空欄でOKです。
3.Detailsタブの以下をメモします。
　★Consumer key
　★Consumer secret
4.Settingタブをクリックし、Application TypeをRead and Wtireにして
　「Update this Twitter application’s settings」ボタンをクリックします。
5.Detailsタブに戻り、画面の最下部に「Create my access token」ボタンがあるのでクリックします。
6.以下をメモします。
　★Access token
　★Access token secret

★4つの情報はconfigに設定します。


---------------------------------
＜デフォルトエンコードの確認：初回のみ＞
OSのデフォルトエンコードを確認したり、utf-8に設定する方法です。
uft-8に変更することで他のソフトやサービスに影響を及ぼす場合がありますので、
慎重に設定してください。（mastodonには影響ないです）

1.以下のコマンドでエンコードを確認。'utf-8'なら以下の手順は不要です。
# python
>>> import sys
>>> sys.getdefaultencoding()
'ascii'

2.site-packagesの場所を確認します。exit、ctrl+Dで抜けます。
>>> import site; site.getsitepackages()
>>> exit

3. 2項で表示されたsite-packagesディレクトリに _reg/sitecustomize.py を置きます。
　CentOS 64bit / python2の場合は /uer/lib64/python2.7/site-package/

4.再度1のコマンドを実行して、'utf-8'に変わることを確認します。

5.るしぼっと用のユーザでも確認します。
# su - [ユーザ名]
# python
>>> import sys
>>> sys.getdefaultencoding()
'ascii'


---------------------------------
＜MeCabのインストール：初回のみ＞
機械学習用にMeCabをインストールします。
いろいろインストール方法がありますが、ソースコードビルドからのインストールがシンプルです。
セットアップなのでrootで実行してもよいです。

1.ソースコードを解凍する
ソースコードの場所：
http://taku910.github.io/mecab/#download

# wget "[アーカイブのリンク]"
# tar xvzf "[アーカイブファイル名]"
# cd [解凍されたフォルダ]
※アーカイブがgoogle driveにあるらしく""で囲むといいです

2.MeCabをメイク→インストールする
# ./configure --with-charset=utf8
# make
# make install

3. 1と同じ場所からIPA辞書ソースコードを解凍する

4.IPA辞書をメイク→インストールする（コマンドはMeCabと一緒）

5.MeCab pythonをインストールする
# pip install mecab-python

6.動作テスト
# mecab
本マグロってホンマにグロいのかな

本      接頭詞,名詞接続,*,*,*,*,本,ホン,ホン
マグロ  名詞,一般,*,*,*,*,マグロ,マグロ,マグロ
って    助詞,格助詞,連語,*,*,*,って,ッテ,ッテ
ホンマに        副詞,一般,*,*,*,*,ホンマに,ホンマニ,ホンマニ
グロ    名詞,一般,*,*,*,*,グロ,グロ,グロ
い      動詞,非自立,*,*,一段,連用形,いる,イ,イ
の      名詞,非自立,一般,*,*,*,の,ノ,ノ
か      助詞,副助詞／並立助詞／終助詞,*,*,*,*,か,カ,カ
な      助詞,終助詞,*,*,*,*,な,ナ,ナ
EOS

7.ライブラリの位置を確認する。
# echo `mecab-config --dicdir`"/mecab-ipadic-neologd"

8.共通ライブラリにパスを通しておく
# mecab-config --libs-only-L | sudo tee /etc/ld.so.conf.d/mecab.conf
# ldconfig


参考にした記事：
https://blogs.yahoo.co.jp/tsukada816/39196715.html


---------------------------------
＜機能説明＞
各機能を有効、無効、調整するにはコンフィグファイル（設定）を編集します。
コンフィグファイルは toot/config.txt です。


＜コマンドライン＞
るしぼっとを実行する時にはコマンドライン引数が必要になります。
認識外のコマンドではるしぼっとは実行されません。
　-v：システム情報の表示
　　コンソールにシステム情報を表示します。

　-ul：ユーザ一覧
　　るしぼっとに登録されたユーザの一覧を表示します。

　-ur [ユーザ名]：ユーザ登録
　　るしぼっとにユーザを登録します。ユーザ名はドメインまで含みます。

　-uu [ユーザ名]：ユーザ再登録
　　既登録のユーザを再登録します。ユーザ名はドメインまで含みます。
　　mastodon側の認証済みアプリを消してしまったり、メアドやパスワードが変わった時にご利用ください。

　-ud [ユーザ名]：ユーザ削除
　　るしぼっとからユーザを削除します。ユーザ名はドメインまで含みます。
　　mastodonの認証済みアプリから削除は手動でおこなってください。
　　　mastodonユーザ設定→認証済みアプリ の アプリ名るしぼっと

※ユーザ登録時の注意：
　ユーザ登録、更新をおこなう際、登録に使用するアカウントが登録されているmastodonサーバに対して
　認証アプリ登録をおこないます。その際、通信不良をおこしたり、mastodonに認識されない場合、
　登録が失敗となります。メンテナンス情報などにも注意してください。


＜連合TL監視機能＞
連合TLのトゥートを解析し、設定したワードのなかで反応します。
　機能有効：LookPTL=on
　　ワードファイル：toot/lltl.txt
　　　※中身はサンプルを参考にしてください

・ファボ（ニコる）：PTL_Favo=on
　TLのトゥートに設定したワードを見つけると、そのトゥートをファボります。
　フォロワーが対象です。

・ブースト：PTL_Boot=on
　TLのトゥートに設定したワードを見つけると、そのトゥートをブーストします。
　フォロワーが対象です。

・紐づけエアリプ：PTL_HRip=on
　TLのトゥートに設定したワードを見つけると、そのトゥートに対してエアリプします。
　トゥートに対して関連付けもおこないます。（相手には通知されません）
　フォロワーが対象です。

・エアリプ：PTL_ARip=on
　TLのトゥートに設定したワードを見つけると、そのトゥートに対してエアリプします。
　相手には通知されません。
　フォロワーが対象です。

・ワード監視：PTL_WordOpe=on
　TLのトゥートを解析し、設定したワードを見つけると任意のアカウントにDM通知をおこないます。
　フォロワーでなくても反応します。


＜ランダムトゥート機能＞
botが学習した単語を組み合わせて適当にトゥートします。
新設の場合は学習を開始してから1時間以上経たないと機能が動かない仕様です。
　機能有効：RandToot=on
　　getRandVal：トゥート頻度。（範囲：0-100）
　　　getRandRangeは乱数の幅で100以上で設定します。
　　　getRandVal÷getRandRangeが1分ごとにトゥートする確率となります。


＜リプライ機能＞
botがリプライを受信した際、設定したワードを見つけるとランダムにリプライを返します。
　　ワードファイル：toot/reply.txt
　　　※中身はサンプルを参考にしてください


＜ファボ通知機能＞
トゥートをファボられた時に、ファボった人のアカウント名、トゥートのURLをトゥートする
twitterライクな機能です。公開トゥートと未収載トゥートが対象です。（未収載はオプションでOFF可）
　機能有効：IND_Favo=on
　　　※IND_FavoTagはトゥートに付加するタグを指定します。
　　　※IND_Favo_Unl=on　未収載トゥートも通知対象にするかしないか。


＜周期トゥート機能＞
指定した時間に任意のトゥートをおこなう機能です。
時間は1日毎の定時間、毎時1回が指定できます。
　機能有効：CircleToot=on
　　周期トゥートファイル：toot/ctoot.txt
　　　※中身はサンプルを参考にしてください
　　　※時間を*で指定すると毎時間トゥートします。例：*.5..毎時5分
　　　※トゥートファイルは1行目は公開範囲を指定します。
　　　　p..公開、l..未収載、u..非公開
　　　　2行目以降に任意のトゥートを入れます（タグにも対応）


＜ワード学習機能＞
連合TLのなかから短い単語を抽出し、辞書としてcsv保管する機能です。
学習した単語は、ランダムトゥートやリプライで使用されます。
また任意にリプライを送って単語を学習させることもできます。
ただし禁止ワードは収集されません。
　機能有効：WordStudy=on
　　studyNum：1周における学習対象トゥート数
　　studyNax：辞書に記録できる最大単語数。これを越えて学習する場合、古いものから忘れていきます。
　　　辞書ファイル：user/userdic.csv
　　　禁止ワードファイル：toot/xxword.txt


＜トラヒック表示機能＞
1時間ごとの連合トゥートの個数を集計し、トゥートします。
トラヒック収集開始の最初の1時間分は計測を捨てます。
　機能有効：Traffic=on
　　集計対象インスタンス：toot/traffic.txt
　　　　選択外のトゥートは --Others-- で集計します。


＜ハード監視機能＞
サーバのメモリ、スワップ、ディスク残量をチェックし、毎日0時に管理者にDMで送る。
内部ではcsvファイルに記録する。（log配下に保存される）
bot本体とは別のプロセスで動作する。
　機能有効：LookHard=on


＜ユーザ収集機能＞
連合でトゥートしたユーザを自動的に収集し、csv保管する機能です。
フォロー、フォロワーの内部管理にも使われます。この機能は停止できない仕様です。
ユーザ収集除外リストに登録したドメインからも収集されますが、フォローはしません。またリムーブします。
（リムーブ時のユーザ数が多いと対象者の全リムーブに時間がかかります）
　ユーザ収集ファイル：user/usercorr.csv
　ユーザ収集除外リスト：toot/usercorr_rem.txt


＜自動フォロー機能＞
ユーザ収集機能で収集したユーザのなかから対象のユーザを自動的にフォローします。
1ユーザ1回だけ自動的にフォローします。
　→収集されてないユーザはフォローしません。
　→鍵垢はフォローしません。
　→フォローリクエストしていた場合は自動解除します。
　　リクエスト解除前に承認されると、フォロワーになれます。
30日間活動のないユーザを自動リムーブします。
ユーザ収集除外リストに登録したドメイン対象になると自動リムーブします。
　機能有効：AutoFollow=on
　　　1回のフォローの上限数は getFollowMnum に整数を入力します。
　　　AIPが食われたり、サーバの負荷がかなり増加するため、通常いじらないでください。


＜twitter連携機能＞
APIを取得したアカウントに連携し、トゥートをツイートします。
その他有効にするにはTwitter APIを取得する必要があります。（twitter APIの取得方法参照）
　機能有効：Twitter=on

3.twitterとの機能を使う場合twitterからAPIを取得します。
　以下＜twitter APIの取得方法＞をご参照ください。

※twitter連携はマスターアカウントのみの連携となる仕様です。




＜ログ機能＞
操作記録や異常記録を log フォルダ以下にログファイルを記録します。
ファイルは日別に分かれます。
　ログレベル：LogLevel
　　a：全てのログを記録　　　　　　　（LevelA,B,C）
　　b：重要なログと気になるログを記録（LevelA,Bのみ、LevelCは記録しない）
　　c：重要なログだけ記録　　　　　　（LevelAログのみ、LevelB,Cは記録しない）


＜bot停止機能＞
bot活動を停止できます。
　機能有効(停止するとき)：BotStart=off


＜bot排他機能＞
botの二重処理を抑止するため、排他機能を実装してます。
先行プロセスが処理途中、処理遅延などで後プロセスで再実行されたときにwaitをかけます。
先行プロセスの処理が完了し排他を解除するか、
後プロセスが最大90秒待っても排他が解除されなければロックを落とします。（実行は次回実行）
　機能有効：Lock=on
　　排他ロックファイル：data/_lock.txt


---------------------------------
＜免責事項＞
---------------------------------
・当ソースの改造、改造物の配布は自由にやってください。
  その際の著作権は放棄しません。
・未改造物の再配布は禁止とします。
・当ソースを使用したことによる不具合、損害について当方は責任を持ちません。
  全て自己責任でお願いします。
・当ソースの仕様、不具合についての質問は受け付けません。
  自己解析、自己対応でお願いします。
・使用の許諾、謝辞については不要です。


